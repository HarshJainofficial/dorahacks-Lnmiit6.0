{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\Hackathone\\\\Nft\\\\Nft_Marketplace\\\\my-new-app\\\\web3-fundraiser-youtube\\\\NFT-Marketplace-Tutorial\\\\src\\\\components\\\\Marketplace.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace() {\n  _s();\n\n  const sampleData = [{\n    name: \"NFT#1\",\n    description: \"AltNFT's First NFT\",\n    website: \"http://axieinfinity.io\",\n    image: \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    price: \"0.03ETH\",\n    currentlySelling: \"True\",\n    address: \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    name: \"NFT#2\",\n    description: \"AltNFT's Second NFT\",\n    website: \"http://axieinfinity.io\",\n    image: \"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n    price: \"0.03ETH\",\n    currentlySelling: \"True\",\n    address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    name: \"NFT#3\",\n    description: \"AltNFT's Third NFT\",\n    website: \"http://axieinfinity.io\",\n    image: \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    price: \"0.03ETH\",\n    currentlySelling: \"True\",\n    address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    let transaction = await contract.getAllNFTs(); //Fetch all the details of every NFT from the contract and display\n\n    const items = await Promise.all(transaction.map(async i => {\n      var tokenURI = await contract.tokenURI(i.tokenId);\n      console.log(\"getting this tokenUri\", tokenURI);\n      tokenURI = GetIpfsUrlFromPinata(tokenURI);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n\n  if (!dataFetched) getAllNFTs();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marketplace, \"eoOZIC3fpxTnVeH+5XYnEv0RFm0=\");\n\n_c = Marketplace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","Marketplace","sampleData","name","description","website","image","price","currentlySelling","address","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","console","log","meta","get","utils","formatUnits","toString","item","toNumber","seller","owner","value","index"],"sources":["C:/Users/ASUS/Desktop/Hackathone/Nft/Nft_Marketplace/my-new-app/web3-fundraiser-youtube/NFT-Marketplace-Tutorial/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n  const sampleData = [\r\n    {\r\n      name: \"NFT#1\",\r\n      description: \"AltNFT's First NFT\",\r\n      website: \"http://axieinfinity.io\",\r\n      image:\r\n        \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n      price: \"0.03ETH\",\r\n      currentlySelling: \"True\",\r\n      address: \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n    {\r\n      name: \"NFT#2\",\r\n      description: \"AltNFT's Second NFT\",\r\n      website: \"http://axieinfinity.io\",\r\n      image:\r\n        \"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n      price: \"0.03ETH\",\r\n      currentlySelling: \"True\",\r\n      address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n    {\r\n      name: \"NFT#3\",\r\n      description: \"AltNFT's Third NFT\",\r\n      website: \"http://axieinfinity.io\",\r\n      image:\r\n        \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n      price: \"0.03ETH\",\r\n      currentlySelling: \"True\",\r\n      address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n  ];\r\n  const [data, updateData] = useState(sampleData);\r\n  const [dataFetched, updateFetched] = useState(false);\r\n\r\n  async function getAllNFTs() {\r\n    const ethers = require(\"ethers\");\r\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    //Pull the deployed contract instance\r\n    let contract = new ethers.Contract(\r\n      MarketplaceJSON.address,\r\n      MarketplaceJSON.abi,\r\n      signer\r\n    );\r\n    //create an NFT Token\r\n    let transaction = await contract.getAllNFTs();\r\n\r\n    //Fetch all the details of every NFT from the contract and display\r\n    const items = await Promise.all(\r\n      transaction.map(async (i) => {\r\n        var tokenURI = await contract.tokenURI(i.tokenId);\r\n        console.log(\"getting this tokenUri\", tokenURI);\r\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n        let meta = await axios.get(tokenURI);\r\n        meta = meta.data;\r\n\r\n        let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\r\n        let item = {\r\n          price,\r\n          tokenId: i.tokenId.toNumber(),\r\n          seller: i.seller,\r\n          owner: i.owner,\r\n          image: meta.image,\r\n          name: meta.name,\r\n          description: meta.description,\r\n        };\r\n        return item;\r\n      })\r\n    );\r\n\r\n    updateFetched(true);\r\n    updateData(items);\r\n  }\r\n\r\n  if (!dataFetched) getAllNFTs();\r\n\r\n  return (\r\n    <div>\r\n      <Navbar></Navbar>\r\n      <div className=\"flex flex-col place-items-center mt-20\">\r\n        <div className=\"md:text-xl font-bold text-white\">Top NFTs</div>\r\n        <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n          {data.map((value, index) => {\r\n            return <NFTTile data={value} key={index}></NFTTile>;\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}